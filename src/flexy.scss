//
// Flexbox grid system
//
// Aims
// - Interoptability with grid systems (opt-in)
// - Easy centering, columns
// - using scss placeholders and mixins, clean markup
//
// @author Connor Atherton
//
* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html, body {
  width: 100%;
  min-height: 100%;
}

//
// Variables
//
$grid-default-padding: .5rem !default;
$grid-default-margin: .7rem !default;
$grid-default-alignment: flex-start !default;
$grid-default-direction: row !default;
$grid-default-justify: flex-start !default;

//
// Mixins
//
@mixin apply-width($width) {
  width: $width;
  flex: none;
}

/**
 * Perform a value into a ratio-to-percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The ratio-to-percentage.
 */
@function ratio-to-percentage($value) {
  @if $value == 0 {
    @return 100%;
  } @else {
    @return (100 / $value) * 1%;
  }
}

@mixin Grid($alignment: flex-start, $direction: $grid-default-direction) {
  // easy aliases
  // top => flex-start
  // bottom => flex-end
  //
  // NOTE top is the default
  // TODO check for top being passed in too
  @if ($alignment == 'bottom') {
    $alignment: flex-end;
  }

  display: flex;
  flex-wrap: wrap;
  padding: 0;
  margin: auto;
  align-items: $alignment;
  width: 100%;
  flex-direction: $direction;
}

@mixin Grid-justify($justify: $grid-default-justify) {
  @if ($justify == 'right') {
    $justify: flex-end;
  } @else if ($justify == 'left') {
    $justify: flex-start;
  }

  justify-content: $justify;
}

@mixin No-Grid {
  flex: none;
  // block or inline-block?
  // I want to stick with inline-block
  // for now.
  display: inline-block;
}

@mixin Grid__item($padding: $grid-default-padding, $margin: $grid-default-margin) {
  flex: 1;
  flex-flow: row wrap;
  justify-content: flex-start;
  padding: $padding;

  //
  // Border-box does not include margin
  // and only border-size and padding
  //
  // margin: $margin;
}

@mixin Grid__item-top {
  align-self: top;
}

@mixin Grid__item-center {
  align-self: center;
}

@mixin Grid__item-bottom {
  align-self: flex-end;
}


//
// Swiss army knife mixin used to set every single
// flex property.
//
@mixin Grid-flex() {

}


//
// These classes should be used by people
// who prefer writing structural information
// inside their markup.
//
// TODO: extract this into a file that includes the framework mixins
//
.Grid {
  @include Grid;

  &.Grid-center {
    align-items: center;
  }

  &.Grid-top {
    align-items: flex-start;
  }

  &.Grid-bottom {
    align-items: flex-end;
  }

  &.Grid-stretch {
    align-items: stretch;
  }

  &.Grid-baseline {
    align-items: baseline;
  }
}

.Grid__item {
  @include Grid__item;

  &.Grid__item-top {
    @include Grid__item-top;
  }

  &.Grid__item-center {
    @include Grid__item-center;
  }

  &.Grid__item-bottom {
    @include Grid__item-bottom;
  }

  $grid-list: 1 2 3 4 5 6 7 8 9 10 11 12;

  @each $grid-size in $grid-list {
    $width: ratio-to-percentage($grid-size);

    //
    // As soon as a width is specified we
    // want to switch back to block content.
    //
    &.Grid__item-width-#{$grid-size} {
      @include apply-width($width);

    }
  }
}

@mixin Grid__item-width {
  display: block;
  float: left;
}

//
// Grid helpers
//
@mixin Grid__item-width-1 {
  $width: ratio-to-percentage(1);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-2 {
  $width: ratio-to-percentage(2);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-3 {
  $width: ratio-to-percentage(3);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-4 {
  $width: ratio-to-percentage(4);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-5 {
  $width: ratio-to-percentage(5);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-6 {
  $width: ratio-to-percentage(6);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-7 {
  $width: ratio-to-percentage(7);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-8 {
  $width: ratio-to-percentage(8);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-9 {
  $width: ratio-to-percentage(9);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-10 {
  $width: ratio-to-percentage(10);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-11 {
  $width: ratio-to-percentage(11);

  @include apply-width($width);
  @include Grid__item-width;
}

@mixin Grid__item-width-12 {
  $width: ratio-to-percentage(12);

  @include apply-width($width);
  @include Grid__item-width;
}

